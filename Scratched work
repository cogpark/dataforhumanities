


/*
@media (min-width: 500px) {

    .side {
        grid-column: col-start / span 3;
        grid-row: 3;
    }
    .ad {
        grid-column: col-start / span 3;
        grid-row: 4;
    }
    .content, .main-footer {
        grid-column: col-start 4 / span 9;
    }

}



    .main-nav {
        grid-column: 2 / span 4;
        display: grid;
        grid-template-columns: repeat(12, [col-start] 1fr);
    }

        }
    .nav-1 {
      grid-column: 2 / 3;
      text-align: center;
  }
    .nav-2 {
       grid-column: 3 / 4;
  }
    .nav-3 {
        grid-column: 4 / 5;
  }
    .nav-4 {
        grid-column: 5 / 6;
   }

  .content {
        grid-column: col-start 3 / span 8;
        grid-row: 2 / 4;
  }
  .side {
        grid-column: col-start 11 / span 2;
        grid-row: 2;
  }
  .ad {
        grid-column: col-start 11 / span 2;
        grid-row: 3;
  }
  .main-footer {
        grid-column: col-start / span 12;
  }
}


h1,h2,h3,h4,h5,h6 {
   color: #76323f;
   font-family: 'Oswald', sans-serif;
}


li, p {
    color:#565656;
    font-family: 'Cabin', sans-serif;
}


a  {
    color:  #76323f;
}

a:hover {
    color: #A6C7F0;
}*/

 <h3>Multiple join conditions</h3>
  Sometimes, you need to join on multiple columns. This happens a lot when you have a "time" column in a table. If we imagine that
our <code>DOGS</code> table above had number of words by month, then joining on the dog's name is going to return one record for each month
that you've worked with the dog. For example, here's an example using George, a very good and smart boy:

  <div class= "codeblock">
    <pre>
      DOGS (without month)
          dog_name |  age  |      breed      | words_learned
      -------------+-------+-----------------+--------------
      | George     |   3   |aussie shepherd  |      149
    </pre>
  </div>

  <div class= "codeblock">
  <pre>
    DOGS (with month)
        dog_name |  age  |      breed      | words_learned |  month
    -------------+-------+-----------------+---------------+ ------
    | George     |   3   |aussie shepherd  |      50       |  Jan
    | George     |   3   |aussie shepherd  |      43       |  Feb
    | George     |   3   |aussie shepherd  |      56       |  March
  </pre>
</div>
  <p>Nice job in March, George. Anyway, if you only wanted to get 1 record back for George -- maybe you're about to send out your March
    postcard -- you would need to join on <code>dog_name</code> and <code>month</code>. All you have to do is append an add an <code>AND</code> clause to the
    <code>JOIN</code>query.
  </p>.



   Here's a couple hiccups you may encounter&#8212;and their solutions.</p><br>
            <h3>No column labels</h3>
                <p>If this is the case, <code>df.head()</code>will treat the first row as column labels, which is not what we want. You could go
                    open the csv, add a new row, write column headers, save it, and rerun your code&#8212;but an easier way is to pass the column
                    headers in an an argument when you create the dataframe:</p>
            <div class= "codeblock">
            <pre>
            # import data using the Pandas read_csv() function and assign the results to a variable
            df = pd.read_csv('path_to/your/data_set.csv',names=('column_one','column_two','column_three','fourth_column'))

            # Show the first 5 rows so that you can get a sense of what the data's like
            df.head()
            </pre></div>


# feed x and y into a scatter plot
            plt.scatter(x,y)

            # give it a title
            plt.title('A very basic scatterplot')

            # draw it
            plt.show()

{% endblock %}